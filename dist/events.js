!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";t.__esModule=!0;var r=function(){function e(e){this.url=e,this.req=new XMLHttpRequest,this.apikey="34f9a86b556a3673b3d5beecad1750ee64e29af72eb355a94e7a14bdc3e2e6ce",this.apiurl="https://www.virustotal.com/vtapi/v2/url/scan"}return e.prototype.scan=function(){this.response(),this.req.open("POST",this.apiurl,!0),this.req.send("apikey="+this.apikey+"&url="+this.url)},e.prototype.response=function(){this.req.onreadystatechange=function(e){this.readyState===XMLHttpRequest.DONE&&(200===this.status?console.log("Réponse reçue: %s",this.responseText):console.log("Status de la réponse: %d (%s)",this.status,this.statusText))}},e}();t.ScanUrl=r},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);document.body.querySelector(".scan").addEventListener("click",function(){console.log("aa");var e=document.body.querySelector("#url");new r.ScanUrl(e.value).scan()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NjYW5VcmwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU2NhblVybCIsInVybCIsInRoaXMiLCJyZXEiLCJYTUxIdHRwUmVxdWVzdCIsImFwaWtleSIsImFwaXVybCIsInNjYW4iLCJyZXNwb25zZSIsIm9wZW4iLCJzZW5kIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiZXZlbnQiLCJyZWFkeVN0YXRlIiwiRE9ORSIsInN0YXR1cyIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0IiwiU2NhblVybF8xIiwiZG9jdW1lbnQiLCJib2R5IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsa0NDbEVBMUIsRUFBQW9CLFlBQUEsRUFDQSxJQUFBTyxFQUFBLFdBQ0EsU0FBQUEsRUFBQUMsR0FDQUMsS0FBQUQsTUFDQUMsS0FBQUMsSUFBQSxJQUFBQyxlQUNBRixLQUFBRyxPQUFBLG1FQUNBSCxLQUFBSSxPQUFBLCtDQW1CQSxPQWpCQU4sRUFBQUosVUFBQVcsS0FBQSxXQUNBTCxLQUFBTSxXQUNBTixLQUFBQyxJQUFBTSxLQUFBLE9BQUFQLEtBQUFJLFFBQUEsR0FDQUosS0FBQUMsSUFBQU8sS0FBQSxVQUFBUixLQUFBRyxPQUFBLFFBQUFILEtBQUFELE1BRUFELEVBQUFKLFVBQUFZLFNBQUEsV0FDQU4sS0FBQUMsSUFBQVEsbUJBQUEsU0FBQUMsR0FDQVYsS0FBQVcsYUFBQVQsZUFBQVUsT0FDQSxNQUFBWixLQUFBYSxPQUNBQyxRQUFBQyxJQUFBLG9CQUFBZixLQUFBZ0IsY0FHQUYsUUFBQUMsSUFBQSxnQ0FBQWYsS0FBQWEsT0FBQWIsS0FBQWlCLGVBS0FuQixFQXhCQSxHQTBCQTNCLEVBQUEyQix3Q0MzQkEzQixFQUFBb0IsWUFBQSxFQUNBLElBQUEyQixFQUFBakQsRUFBQSxHQUNBa0QsU0FBQUMsS0FBQUMsY0FBQSxTQUNBQyxpQkFBQSxtQkFDQVIsUUFBQUMsSUFBQSxNQUNBLElBQUFoQixFQUFBb0IsU0FBQUMsS0FBQUMsY0FBQSxRQUNBLElBQUFILEVBQUFwQixRQUFBQyxFQUFBVixPQUNBZ0IiLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xyXG52YXIgU2NhblVybCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFNjYW5VcmwodXJsKSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5yZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICB0aGlzLmFwaWtleSA9ICczNGY5YTg2YjU1NmEzNjczYjNkNWJlZWNhZDE3NTBlZTY0ZTI5YWY3MmViMzU1YTk0ZTdhMTRiZGMzZTJlNmNlJztcclxuICAgICAgICB0aGlzLmFwaXVybCA9ICdodHRwczovL3d3dy52aXJ1c3RvdGFsLmNvbS92dGFwaS92Mi91cmwvc2Nhbic7XHJcbiAgICB9XHJcbiAgICBTY2FuVXJsLnByb3RvdHlwZS5zY2FuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2UoKTtcclxuICAgICAgICB0aGlzLnJlcS5vcGVuKCdQT1NUJywgdGhpcy5hcGl1cmwsIHRydWUpO1xyXG4gICAgICAgIHRoaXMucmVxLnNlbmQoXCJhcGlrZXk9XCIgKyB0aGlzLmFwaWtleSArIFwiJnVybD1cIiArIHRoaXMudXJsKTtcclxuICAgIH07XHJcbiAgICBTY2FuVXJsLnByb3RvdHlwZS5yZXNwb25zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlLDqXBvbnNlIHJlw6d1ZTogJXNcIiwgdGhpcy5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTdGF0dXMgZGUgbGEgcsOpcG9uc2U6ICVkICglcylcIiwgdGhpcy5zdGF0dXMsIHRoaXMuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTY2FuVXJsO1xyXG59KCkpO1xyXG5leHBvcnRzLlNjYW5VcmwgPSBTY2FuVXJsO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxudmFyIFNjYW5VcmxfMSA9IHJlcXVpcmUoXCIuL1NjYW5VcmxcIik7XHJcbnZhciBzY2FuYnV0dG9uID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCcuc2NhbicpO1xyXG5zY2FuYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc29sZS5sb2coJ2FhJyk7XHJcbiAgICB2YXIgdXJsID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCcjdXJsJyk7XHJcbiAgICB2YXIgc2NhbiA9IG5ldyBTY2FuVXJsXzEuU2NhblVybCh1cmwudmFsdWUpO1xyXG4gICAgc2Nhbi5zY2FuKCk7XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9